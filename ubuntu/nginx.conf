#运行用户
user www www;

#以非守护进程的方式运行
daemon off;

#启动进程,通常设置成和cpu的数量相等
worker_processes  1;

#全局日志及PID文件
error_log  /home/www/logs/nginx.error.log;
pid /home/www/logs/nginx.pid;

#工作模式及连接数上限
events {
    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,
    #仅用于linux2.6以上内核,可以大大提高nginx的性能
    use   epoll; 

    #单个后台worker process进程的最大并发链接数    
    worker_connections  1024;

    # 并发总数是 worker_processes 和 worker_connections 的乘积
    # 即 max_clients = worker_processes * worker_connections
    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么
    # 为什么上面反向代理要除以4，应该说是一个经验值
    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000
    # worker_connections 值的设置跟物理内存大小有关
    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数
    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右
    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：
    # $ cat /proc/sys/fs/file-max
    # 输出 34336
    # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内
    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置
    # 使得并发总数小于操作系统可以打开的最大文件数目
    # 其实质也就是根据主机的物理CPU和内存进行配置
    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。
    # ulimit -SHn 65535

}

http {
    #设定mime类型,类型由mime.type文件定义
    include    /usr/local/nginx/conf/mime.types;
    #default_type  application/octet-stream;
    #设定日志格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    #对于普通应用，必须设为 on,
    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    #sendfile     on;
    #tcp_nopush     on;

    #连接超时时间
    keepalive_timeout  65;
    tcp_nodelay     on;

    #开启gzip压缩
    gzip  on;
    gzip_disable "MSIE [1-6].";

    #设定请求缓冲
    client_header_buffer_size    128k;
    large_client_header_buffers  4 128k;

    server {
        listen 5444;
        server_name localhost;
        root /home/www/;
        location / {
              include uwsgi_params;
              uwsgi_pass 127.0.0.1:8001; # uwsgi进程监听的IP和端口
              uwsgi_param UWSGI_PYHOME /home/www/LoveinSEU; # 虚拟环境目录
              uwsgi_param UWSGI_CHDIR  /home/www/LoveinSEU; # 网站根目录
              uwsgi_param UWSGI_SCRIPT main:app; # 指定启动程序
           }
    }
    
    upstream appserver {
        server 127.0.0.1:5448;
        server 127.0.0.1:5446;
    }

    #设定虚拟主机配置
    server {
        #侦听80端口
        listen    8080;

        #定义访问域名或者IP
        server_name  localhost;

        #请求内容部分长度
        client_max_body_size 20m;
        client_body_buffer_size 512k;     

        #定义网页文件根目录    
        #root /usr/local/nginx/www;
        root /home/www;

        #设定本虚拟主机的访问日志
        access_log  /home/www/logs/nginx.access.log  main;

        #默认请求
        location / {
            #定义首页索引文件的名称
            index index.html index.php;
            #autoindex on;
            #proxy_pass http://appserver;
        }

        #用于清除缓存，假设一个URL为http://192.168.1.1/test.txt，通过访问http://192.168.1.1/purge/test.txt就可以清除该URL的缓存。
        #location ~ /purge(/.*)
        #{
        #    #设置只允许指定的IP或IP段才可以清除URL缓存。
        #    #allow          127.0.0.1;
        #    allow           all;
        #    deny            all;
        #    proxy_cache_purge    cache_one   $host$1$is_args$args;
        #}

        # 定义错误提示页面
        #error_page   500 502 503 504 /50x.html;
        #location = /50x.html {
        #}

        #文件上传
        location /upload {
            # 转到后台处理URL，表示Nginx接收完上传的文件后，然后交给后端处理的地址
            upload_pass @upload_backend_python; 
         
            # 上传文件临时存放路径，1表示使用散列，需要在临时路径下创建名称0到9的目录，上传时候会进行一个散列处理。
            #upload_store /usr/local/nginx/www/image 1;
            upload_store /home/www/upload 1;

            # 上传文件的权限，rw表示读写 r只读
            upload_store_access user:r;
         
            # upload_resumable on;
         
            #set $upload_field_name "file";
            # 这里写入http报头，pass到后台页面后能获取这里set的报头字段
            upload_set_form_field "${upload_field_name}_name" $upload_file_name;
            upload_set_form_field "${upload_field_name}_content_type" $upload_content_type;
            upload_set_form_field "${upload_field_name}_path" $upload_tmp_path;
         
            # Upload模块自动生成的一些信息，如文件大小与文件md5值
            upload_aggregate_form_field "${upload_field_name}_md5" $upload_file_md5;
            upload_aggregate_form_field "${upload_field_name}_size" $upload_file_size;
         
            # 允许的字段，允许全部可以 "^.*$"
            upload_pass_form_field "^.*$";
            # upload_pass_form_field "^submit$|^description$";
         
            # 每秒字节速度控制，0表示不限制，默认0, 128K
            upload_limit_rate 0;
         
            # 如果pass页面是以下状态码，就删除此次上传的临时文件
            upload_cleanup 400 404 499 500-505;
         
            # 把前端脚本请求的参数会传给后端的脚本语言，比如：http://192.168.1.251:9000/upload/?k=23，后台可以通过POST['k']来访问
            upload_pass_args on;  
        }
        
        #图片上传后端处理
        location @upload_backend_python {
            proxy_pass http://127.0.0.1:5444;
            #如果不需要后端处理，直接return 200
            #return 200;
        }

        #静态文件，nginx自己处理
        location ~ ^/(html|jpg|jpeg|png|javascript|js|css|flash|media|static)/ {
            #过期30天，静态文件不怎么更新，过期可以设大一点，
            #如果频繁更新，则可以设置得小一点。
            expires 7d;
        }


        #flask请求
        location ~ /flask* {
            include      uwsgi_params;
            uwsgi_pass   127.0.0.1:8001;  # 指向uwsgi 所应用的内部地址,所有请求将转发给uwsgi 处理
            uwsgi_param  UWSGI_PYHOME /home/pirdol/python; # 指向虚拟环境目录
            uwsgi_param  UWSGI_CHDIR  /home/pirdol/python; # 指向网站根目录
            uwsgi_param  UWSGI_SCRIPT flask_hello:app; # 指定启动程序
          }    

        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.
        location ~ .php$ {
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include fastcgi_params;
        }

        #禁止访问 .htxxx 文件
            location ~ /.ht {
            deny all;
        }
    }
}
